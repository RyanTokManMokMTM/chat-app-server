syntax = "v1"

info(
    title: "types title here"
    desc: "types desc here"
    author: "types author here"
    email: "types email here"
    version: "types version here"
)

type (
    AddStoryReq {}
    AddStoryResp {
        Code uint `json:"code"`
        Info StoryInfo `json:"story_info"`
    }

    GetUserStoryReq {
        userID uint `path:"user_id"`
        StoryCreatedTime uint `form:"story_created_time,default=0"`
    }
    GetUserStoryResp {
        Code uint `json:"code"`
        Stories []StoryInfo `json:"stories"`
        LastStoryId uint `json:"last_story_id"`
    }

    GetActiveStoryReq {
        Page uint `form:"page,default=1"`
        Limit uint `form:"limit,default=20"`
        LatestID uint `form:"lastestId,default=0"`
        StoryCreatedTime uint `form:"story_created_time,default=0"`
    }
    GetActiveStoryResp {
        Code uint `json:"code"`
        PageableInfo
        CurrentStoryTime uint `json:"current_story_time"`
        FriendStroies []FriendStroy `json:"active_stories"`
    }

    DeleteStoryReq {
        StoryID uint `json:"story_id"`
    }
    DeleteStoryResp {
        Code uint `json:"code"`
    }

    GetStoryInfoByIdRep {
        StoryID uint `path:"story_id"`
    }
    GetStoryInfoByIdResp {
        Code uint `json:"code"`
        StoryInfo
        IsLiked bool `json:"is_liked"`
        TotalSeenCount uint `json:"seen_count"`
        CreateAt uint `json:"create_at"`
        StorySeenList []StorySeenUserBasicInfo `json:"story_seen_list"`
    }

    StoryInfo{
        StoryID uint `json:"story_id"`
        StoryUUID string `json:"story_uuid"`
        StoryMediaURL string `json:"media_url"`
    }

)
type (
    StorySeenUserBasicInfo{
        Id uint `json:"user_id"`
        Avatar string `json:"avatar"`
     }
)

type (
    UpdateStorySeenReq {
        FriendId uint `json:"friend_id"`
        StoryId uint `json:"story_id"`
    }
    UpdateStorySeenResp {
        Code uint `json:"code"`
    }

    CreateStoryLikeReq {
        StoryId uint `json:"story_id"`
    }
    CreateStoryLikeResp {
        Code uint `json:"code"`
    }

    DeleteStoryLikeReq {
        StoryId uint `json:"story_id"`
    }
    DeleteStoryLikeResp {
        Code uint `json:"code"`
    }

    GetStorySeenListReq {
        StoryId uint `path:"story_id"`
    }

    GetStorySeenListResp {
        Code uint `json:"code"`
        TotalSeen uint `json:"total_seen"`
        SeenList []StorySeenInfo `json:"seen_list"`
    }
)

type (
    FriendStroy {
        UserID uint `json:"id"`
        Uuid string `json:"uuid"`
        UserName string `json:"name"`
        UserAvatar string `json:"avatar"`
        IsSeen bool `json:"is_seen"`
        LatestStoryTimeStamp uint `json:"latest_story_time_stamp"`
    }

    StorySeenInfo {
        UserID uint `json:"id"`
        Uuid string `json:"uuid"`
        UserName string `json:"name"`
        UserAvatar string `json:"avatar"`
        IsLiked bool `json:"is_liked"`
        CreatedAt uint `json:"created_at"`
    }
)

@server (
    group: story
    prefix: /api/v1
    jwt: Auth
)
service CoreAPI{
    @doc(
        summary: "Create a new instance story"
    )
    @handler AddStory
    post /story(AddStoryReq) returns (AddStoryResp)

    @doc(
        summary: "Delete an existing story"
    )
    @handler DeleteStory
    delete /story(DeleteStoryReq) returns(DeleteStoryResp)

    @doc(
        summary: "Get owner stories"
    )
    @handler GetUserStoriesByUserId
    get /stories/:user_id(GetUserStoryReq) returns (GetUserStoryResp)

    @doc(
        summary: "Get friends active story"
    )
    @handler GetActiveStories
    get /stories/active(GetActiveStoryReq) returns (GetActiveStoryResp)

    @doc(
        summary: "Update story Id which is latest seen"
    )
    @handler UpdateStorySeen
    put /story/seen(UpdateStorySeenReq) returns (UpdateStorySeenResp)

    @doc(
        summary: "Create a story like"
    )
    @handler CreateStoryLike
    post /story/like(CreateStoryLikeReq) returns (CreateStoryLikeResp)

    @doc(
        summary: "Delete a story like"
    )
    @handler DeleteStoryLike
    delete /story/like(DeleteStoryLikeReq) returns (DeleteStoryLikeResp)

    @doc(
        summary: "Get an instance story by storyID"
    )
    @handler GetStoryInfo
    get /story/:story_id (GetStoryInfoByIdRep) returns (GetStoryInfoByIdResp)

    @doc(
        summary: "Get the seen user list of instance story by storyID"
    )
    @handler GetStorySeenListInfo
    get /story/seen/:story_id (GetStorySeenListReq) returns (GetStorySeenListResp)
}
