// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	friend "github.com/ryantokmanmokmtm/chat-app-server/app/core/cmd/api/internal/handler/friend"
	group "github.com/ryantokmanmokmtm/chat-app-server/app/core/cmd/api/internal/handler/group"
	health "github.com/ryantokmanmokmtm/chat-app-server/app/core/cmd/api/internal/handler/health"
	message "github.com/ryantokmanmokmtm/chat-app-server/app/core/cmd/api/internal/handler/message"
	sticker "github.com/ryantokmanmokmtm/chat-app-server/app/core/cmd/api/internal/handler/sticker"
	story "github.com/ryantokmanmokmtm/chat-app-server/app/core/cmd/api/internal/handler/story"
	user "github.com/ryantokmanmokmtm/chat-app-server/app/core/cmd/api/internal/handler/user"
	"github.com/ryantokmanmokmtm/chat-app-server/app/core/cmd/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				// Add a new friend
				Method:  http.MethodPost,
				Path:    "/user/friend",
				Handler: friend.AddFriendHandler(serverCtx),
			},
			{
				// Delete a friend
				Method:  http.MethodDelete,
				Path:    "/user/friend",
				Handler: friend.DeleteFriendHandler(serverCtx),
			},
			{
				// Get one friend information
				Method:  http.MethodGet,
				Path:    "/user/friend/:uuid",
				Handler: friend.GetFriendInformationHandler(serverCtx),
			},
			{
				// Get all user friends
				Method:  http.MethodGet,
				Path:    "/user/friends",
				Handler: friend.GetFriendListHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// Create a new group with group members
				Method:  http.MethodPost,
				Path:    "/group",
				Handler: group.CreateGroupHandler(serverCtx),
			},
			{
				// Delete an existing group
				Method:  http.MethodDelete,
				Path:    "/group",
				Handler: group.DeleteGroupHandler(serverCtx),
			},
			{
				// Get user joined group
				Method:  http.MethodGet,
				Path:    "/group",
				Handler: group.GetUserGroupsHandler(serverCtx),
			},
			{
				// Update and update group avatar
				Method:  http.MethodPost,
				Path:    "/group/avatar/:group_id",
				Handler: group.UploadGroupAvatarHandler(serverCtx),
			},
			{
				// Count user group
				Method:  http.MethodGet,
				Path:    "/group/count",
				Handler: group.CountUserGroupHandler(serverCtx),
			},
			{
				// Get group info by UUID
				Method:  http.MethodGet,
				Path:    "/group/info/uuid/:uuid",
				Handler: group.GetGroupInfoByUUIDHandler(serverCtx),
			},
			{
				// Join a new group by groupID
				Method:  http.MethodPost,
				Path:    "/group/join/:group_id",
				Handler: group.JoinGroupHandler(serverCtx),
			},
			{
				// Leave a joined group by groupID
				Method:  http.MethodDelete,
				Path:    "/group/leave/:group_id",
				Handler: group.LeaveGroupHandler(serverCtx),
			},
			{
				// Get an group members
				Method:  http.MethodGet,
				Path:    "/group/members/:group_id",
				Handler: group.GetGroupMembersHandler(serverCtx),
			},
			{
				// Search group by name
				Method:  http.MethodGet,
				Path:    "/group/search",
				Handler: group.SearchGroupHandler(serverCtx),
			},
			{
				// Update and update group info
				Method:  http.MethodPatch,
				Path:    "/group/update",
				Handler: group.UpdateGroupInfoHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/ping",
				Handler: health.HealthCheckHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// get room messages by roomID
				Method:  http.MethodGet,
				Path:    "/message",
				Handler: message.GetMessagesHandler(serverCtx),
			},
			{
				// Delete one message
				Method:  http.MethodDelete,
				Path:    "/message",
				Handler: message.DeleteMessageHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/sticker",
				Handler: sticker.CreateStickerGroupHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/sticker/:sticker_uuid",
				Handler: sticker.GetStickerGroupInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/sticker/list",
				Handler: sticker.GetStickerGroupListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/sticker/resources/:sticker_group_uuid",
				Handler: sticker.GetStickerGroupResourcesHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// Get owner stories
				Method:  http.MethodGet,
				Path:    "/stories/:user_id",
				Handler: story.GetUserStoriesByUserIdHandler(serverCtx),
			},
			{
				// Get friends active story
				Method:  http.MethodGet,
				Path:    "/stories/active",
				Handler: story.GetActiveStoriesHandler(serverCtx),
			},
			{
				// Create a new instance story
				Method:  http.MethodPost,
				Path:    "/story",
				Handler: story.AddStoryHandler(serverCtx),
			},
			{
				// Delete an existing story
				Method:  http.MethodDelete,
				Path:    "/story",
				Handler: story.DeleteStoryHandler(serverCtx),
			},
			{
				// Get an instance story by storyID
				Method:  http.MethodGet,
				Path:    "/story/:story_id",
				Handler: story.GetStoryInfoHandler(serverCtx),
			},
			{
				// Create a story like
				Method:  http.MethodPost,
				Path:    "/story/like",
				Handler: story.CreateStoryLikeHandler(serverCtx),
			},
			{
				// Delete a story like
				Method:  http.MethodDelete,
				Path:    "/story/like",
				Handler: story.DeleteStoryLikeHandler(serverCtx),
			},
			{
				// Update story Id which is latest seen
				Method:  http.MethodPut,
				Path:    "/story/seen",
				Handler: story.UpdateStorySeenHandler(serverCtx),
			},
			{
				// Get the seen user list of instance story by storyID
				Method:  http.MethodGet,
				Path:    "/story/seen/:story_id",
				Handler: story.GetStorySeenListInfoHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// Get User Profile - Other/Own
				Method:  http.MethodGet,
				Path:    "/user/info",
				Handler: user.GetUserInfoHandler(serverCtx),
			},
			{
				// User account sign in
				Method:  http.MethodPost,
				Path:    "/user/signin",
				Handler: user.SignInHandler(serverCtx),
			},
			{
				// User accout sign up
				Method:  http.MethodPost,
				Path:    "/user/signup",
				Handler: user.SignUpHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// Upload and update user avatar
				Method:  http.MethodPost,
				Path:    "/user/avatar",
				Handler: user.UploadUserAvatarHandler(serverCtx),
			},
			{
				// Upload and update user cover
				Method:  http.MethodPost,
				Path:    "/user/cover",
				Handler: user.UploadUserCoverHandler(serverCtx),
			},
			{
				// Update user profile
				Method:  http.MethodPatch,
				Path:    "/user/info",
				Handler: user.UpdateUserInfoHandler(serverCtx),
			},
			{
				// Get User Friend Profile - with `isFriend` data
				Method:  http.MethodGet,
				Path:    "/user/profile",
				Handler: user.GetUserFriendProfileHandler(serverCtx),
			},
			{
				// Search user by name
				Method:  http.MethodGet,
				Path:    "/user/search",
				Handler: user.SearchUserHandler(serverCtx),
			},
			{
				// Update user message status
				Method:  http.MethodPatch,
				Path:    "/user/status",
				Handler: user.UpdateUserStatusHandler(serverCtx),
			},
			{
				// Add an existing sticker to user account
				Method:  http.MethodPost,
				Path:    "/user/sticker",
				Handler: user.AddUserStickerHandler(serverCtx),
			},
			{
				// Remove the sticker is added
				Method:  http.MethodPatch,
				Path:    "/user/sticker",
				Handler: user.DeleteUserStickerHandler(serverCtx),
			},
			{
				// Check an existing sticker has been added to user
				Method:  http.MethodGet,
				Path:    "/user/sticker/:sticker_id",
				Handler: user.IsStickerExistHandler(serverCtx),
			},
			{
				// Get user sticker group
				Method:  http.MethodGet,
				Path:    "/user/sticker/list",
				Handler: user.GetUserStickersHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)
}
