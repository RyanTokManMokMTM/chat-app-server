// Code generated by goctl. DO NOT EDIT.
package types

type AddFriendReq struct {
	UserID uint `json:"user_id"`
}

type AddFriendResp struct {
	Code uint `json:"code"`
}

type AddStickerReq struct {
	StickerUUID string `json:"sticker_id"`
}

type AddStickerResp struct {
	Code uint `json:"code"`
}

type AddStoryReq struct {
}

type AddStoryResp struct {
	Code uint      `json:"code"`
	Info StoryInfo `json:"story_info"`
}

type CommonUserInfo struct {
	ID            uint   `json:"id,omitempty"`
	Uuid          string `json:"uuid,omitempty"`
	NickName      string `json:"name,omitempty"`
	Avatar        string `json:"avatar,omitempty"`
	Email         string `json:"email,omitempty"`
	Cover         string `json:"cover,omitempty"`
	StatusMessage string `json:"status"`
}

type CountUserGroupReq struct {
}

type CountUserGroupResp struct {
	Code  uint `json:"code"`
	Total uint `json:"total"`
}

type CreateGroupReq struct {
	GroupName    string `json:"group_name"`
	GroupMembers []uint `json:"members"`
	GroupAvatar  string `json:"avatar"`
}

type CreateGroupResp struct {
	Code        uint   `json:"code"`
	GroupUUID   string `json:"group_uuid"`
	GroupAvatar string `json:"grou_avatar"`
}

type CreateStickerGroupReq struct {
	StickerName string `form:"sticker_name"`
}

type CreateStickerGroupResp struct {
	Code             uint   `json:"code"`
	StickerGroupUUID string `json:"sticker_group_id"`
}

type CreateStoryLikeReq struct {
	StoryId uint `json:"story_id"`
}

type CreateStoryLikeResp struct {
	Code uint `json:"code"`
}

type DeleteFriendReq struct {
	UserID uint `json:"user_id"`
}

type DeleteFriendResp struct {
	Code uint `json:"code"`
}

type DeleteGroupReq struct {
	GroupID uint `json:"group_id"`
}

type DeleteGroupResp struct {
	Code uint `json:"code"`
}

type DeleteMessageReq struct {
	MesssageID uint `json:"msg_id"`
}

type DeleteMessageResp struct {
	Code uint `json:"code"`
}

type DeleteStickerReq struct {
	StickerUUID string `json:"sticker_id"`
}

type DeleteStickerResp struct {
	Code uint `json:"code"`
}

type DeleteStoryLikeReq struct {
	StoryId uint `json:"story_id"`
}

type DeleteStoryLikeResp struct {
	Code uint `json:"code"`
}

type DeleteStoryReq struct {
	StoryID uint `json:"story_id"`
}

type DeleteStoryResp struct {
	Code uint `json:"code"`
}

type FriendInfo struct {
	ID       uint   `json:"id,omitempty"`
	Uuid     string `json:"uuid,omitempty"`
	NickName string `json:"name,omitempty"`
	Avatar   string `json:"avatar,omitempty"`
}

type FriendStroy struct {
	UserID               uint   `json:"id"`
	Uuid                 string `json:"uuid"`
	UserName             string `json:"name"`
	UserAvatar           string `json:"avatar"`
	IsSeen               bool   `json:"is_seen"`
	LatestStoryTimeStamp uint   `json:"latest_story_time_stamp"`
}

type FullGroupInfo struct {
	GroupInfo
	Members   uint   `json:"members"`
	IsJoined  bool   `json:"is_joined"`
	IsOwner   bool   `json:"is_owner"`
	CreatedBy string `json:"created_by"`
}

type GetActiveStoryReq struct {
	Page             uint `form:"page,default=1"`
	Limit            uint `form:"limit,default=20"`
	LatestID         uint `form:"lastestId,default=0"`
	StoryCreatedTime uint `form:"story_created_time,default=0"`
}

type GetActiveStoryResp struct {
	Code uint `json:"code"`
	PageableInfo
	CurrentStoryTime uint          `json:"current_story_time"`
	FriendStroies    []FriendStroy `json:"active_stories"`
}

type GetFriendInfoReq struct {
	Uuid string `path:"uuid"`
}

type GetFriendInfoResp struct {
	Code       uint       `json:"code"`
	FriendInfo FriendInfo `json:"friend_info"`
}

type GetFriendListReq struct {
	Page  uint `form:"page,default=1"`
	Limit uint `form:"limit,default=20"`
}

type GetFriendListResp struct {
	Code uint `json:"code"`
	PageableInfo
	FriendList []CommonUserInfo `json:"friends"`
}

type GetGroupInfoByUUIDReq struct {
	UUID string `path:"uuid"`
}

type GetGroupInfoByUUIDResp struct {
	Code   uint          `json:"code"`
	Result FullGroupInfo `json:"result"`
}

type GetGroupMembersReq struct {
	GroupID  uint `path:"group_id"`
	Page     uint `form:"page,default=1"`
	Limit    uint `form:"limit,default=20"`
	LatestID uint `form:"lastestId,default=0"`
}

type GetGroupMembersResp struct {
	Code uint `json:"code"`
	PageableInfo
	MemberList []GroupMemberInfo `json:"member_list"`
}

type GetMessagesReq struct {
	MessageType uint `json:"message_type"`
	SouceId     uint `json:"id"` //can be a groupId or friendId
	Page        uint `form:"page,default=1"`
	Limit       uint `form:"limit,default=20"`
	LatestID    uint `form:"latest_id,default=0"`
}

type GetMessagesResp struct {
	Code     uint          `json:"code"`
	Messages []MessageUser `json:"message"`
}

type GetStickerInfoReq struct {
	StickerUUID string `path:"sticker_uuid"`
}

type GetStickerInfoResp struct {
	Code        uint        `json:"code"`
	StickerInfo StickerInfo `json:"sticker_info"`
}

type GetStickerListReq struct {
}

type GetStickerListResp struct {
	Code     uint          `json:"code"`
	Stickers []StickerInfo `json:"stickers"`
}

type GetStickerResourcesReq struct {
	StickerGroupUUID string `path:"sticker_group_uuid"`
}

type GetStickerResourcesResp struct {
	Code          uint     `json:"code"`
	StickerId     string   `json:"sticker_id"`
	ResourcesPath []string `json:"resources_path"`
}

type GetStoryInfoByIdRep struct {
	StoryID uint `path:"story_id"`
}

type GetStoryInfoByIdResp struct {
	Code uint `json:"code"`
	StoryInfo
	IsLiked        bool                     `json:"is_liked"`
	TotalSeenCount uint                     `json:"seen_count"`
	CreateAt       uint                     `json:"create_at"`
	StorySeenList  []StorySeenUserBasicInfo `json:"story_seen_list"`
}

type GetStorySeenListReq struct {
	StoryId uint `path:"story_id"`
}

type GetStorySeenListResp struct {
	Code      uint            `json:"code"`
	TotalSeen uint            `json:"total_seen"`
	SeenList  []StorySeenInfo `json:"seen_list"`
}

type GetUserFriendProfileReq struct {
	UserID uint   `form:"id,optional"`
	UUID   string `form:"uuid,optional"`
}

type GetUserFriendProfileResp struct {
	Code     uint           `json:"code"`
	UserInfo CommonUserInfo `json:"user_info"`
	IsFriend bool           `json:"is_friend"`
}

type GetUserGroupReq struct {
	Page     uint `form:"page,default=1"`
	Limit    uint `form:"limit,default=20"`
	LatestID uint `form:"lastestId,default=0"`
}

type GetUserGroupResp struct {
	Code uint `json:"code"`
	PageableInfo
	Groups []GroupInfo `json:"groups"`
}

type GetUserInfoReq struct {
	UserID uint   `form:"id,optional"`
	UUID   string `form:"uuid,optional"`
}

type GetUserInfoResp struct {
	Code          uint   `json:"code"`
	UUID          string `json:"uuid"`
	Name          string `json:"name"`
	Email         string `json:"email"`
	Avatar        string `json:"avatar"`
	Cover         string `json:"cover"`
	StatusMessage string `json:"status"`
}

type GetUserStickerReq struct {
}

type GetUserStickerResp struct {
	Code     uint          `json:"code"`
	Stickers []StickerInfo `json:"stickers"`
}

type GetUserStoryReq struct {
	UserID           uint `path:"user_id"`
	StoryCreatedTime uint `form:"story_created_time,default=0"`
}

type GetUserStoryResp struct {
	Code        uint        `json:"code"`
	Stories     []StoryInfo `json:"stories"`
	LastStoryId uint        `json:"last_story_id"`
}

type GroupInfo struct {
	ID        uint   `json:"id"`
	Uuid      string `json:"uuid"`
	Name      string `json:"name"`
	Avatar    string `json:"avatar"`
	Desc      string `json:"desc"`
	CreatedAt uint   `json:"created_at"`
}

type GroupMemberInfo struct {
	CommonUserInfo
	IsGroupLead bool `json:"is_group_lead"`
}

type HealthCheckResp struct {
	Resp string `json:"resp"`
}

type IsStickerExistReq struct {
	StickerUUID string `path:"sticker_id"`
}

type IsStickerExistResp struct {
	Code    uint `json:"code"`
	IsExist bool `json:"is_exist"`
}

type JoinGroupReq struct {
	GroupID uint `path:"group_id"`
}

type JoinGroupResp struct {
	Code uint `json:"code"`
}

type LeaveGroupReq struct {
	GroupID uint `path:"group_id"`
}

type LeaveGroupResp struct {
	Code uint `json:"code"`
}

type MessageUser struct {
	MessageID   uint   `json:"id"`
	FromID      uint   `json:"from_id"`
	ToID        uint   `json:"to_id"`
	Content     string `json:"content"`
	ContentType string `json:"content_type"`
	MessageType uint   `json:"message_type"`
	Url         string `json:"url"`
	FileName    string `json:"file_name"`
	FileSize    uint   `json:"file_size"`
	StoryTime   uint   `json:"story_available_time"`
	CreatedAt   uint   `json:"create_at"`
}

type PageableInfo struct {
	TotalPage uint `json:"total_page"`
	Page      uint `json:"current_page"`
}

type SearchGroupReq struct {
	Qurey string `form:"query"`
}

type SearchGroupResp struct {
	Code    uint            `json:"code"`
	Results []FullGroupInfo `json:"results"`
}

type SearchUserReq struct {
	Qurey string `form:"query"`
}

type SearchUserResp struct {
	Code    uint               `json:"code"`
	Results []SearchUserResult `json:"results"`
}

type SearchUserResult struct {
	UserInfo CommonUserInfo `json:"user_info"`
	IsFriend bool           `json:"is_friend"`
}

type SignInReq struct {
	Email    string `json:"email" validate:"email,min=8,max=32"`
	Password string `json:"password" validate:"min=8,max=32"`
}

type SignInResp struct {
	Code        uint           `json:"code"`
	Token       string         `json:"token"`
	ExpiredTime uint           `json:"expired_time"`
	UserInfo    CommonUserInfo `json:"user_info"`
}

type SignUpReq struct {
	Email    string `json:"email" validate:"email,min=8,max=32"`
	Name     string `json:"name" validate:"min=4,max=16"`
	Password string `json:"password" validate:"min=8,max=32"`
}

type SignUpResp struct {
	Code        uint   `json:"code"`
	Token       string `json:"token"`
	ExpiredTime uint   `json:"expired_time"`
}

type StickerInfo struct {
	StickerID   string `json:"sticker_id"`
	StickerName string `json:"sticker_name"`
	StickerThum string `json:"sticker_thum"`
}

type StoryInfo struct {
	StoryID       uint   `json:"story_id"`
	StoryUUID     string `json:"story_uuid"`
	StoryMediaURL string `json:"media_url"`
}

type StorySeenInfo struct {
	UserID     uint   `json:"id"`
	Uuid       string `json:"uuid"`
	UserName   string `json:"name"`
	UserAvatar string `json:"avatar"`
	IsLiked    bool   `json:"is_liked"`
	CreatedAt  uint   `json:"created_at"`
}

type StorySeenUserBasicInfo struct {
	Id     uint   `json:"user_id"`
	Avatar string `json:"avatar"`
}

type UpdateGroupInfoReq struct {
	GroupID   uint   `json:"group_id"`
	GroupName string `json:"group_name"`
	GroupDesc string `json:"group_desc"`
}

type UpdateGroupInfoResp struct {
	Code uint `json:"code"`
}

type UpdateStorySeenReq struct {
	FriendId uint `json:"friend_id"`
	StoryId  uint `json:"story_id"`
}

type UpdateStorySeenResp struct {
	Code uint `json:"code"`
}

type UpdateUserInfoReq struct {
	Name string `json:"name" validate:"min=4,max=32"`
}

type UpdateUserInfoResp struct {
	Code uint `json:"code"`
}

type UpdateUserStatusReq struct {
	Status string `json:"status" validate:"max=50"`
}

type UpdateUserStatusResp struct {
	Code uint `json:"code"`
}

type UploadGroupAvatarReq struct {
	GroupID uint `path:"group_id"`
}

type UploadGroupAvatarResp struct {
	Code uint   `json:"code"`
	Path string `json:"path"`
}

type UploadUserAvatarReq struct {
}

type UploadUserAvatarResp struct {
	Code uint   `json:"code"`
	Path string `json:"path"`
}

type UploadUserCoverReq struct {
}

type UploadUserCoverResp struct {
	Code uint   `json:"code"`
	Path string `json:"path"`
}
