// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: cmd/rpc/proto/core.proto

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_SignUp_FullMethodName               = "/core.UserService/SignUp"
	UserService_SignIn_FullMethodName               = "/core.UserService/SignIn"
	UserService_GetUserInfo_FullMethodName          = "/core.UserService/GetUserInfo"
	UserService_GetUserFriendProfile_FullMethodName = "/core.UserService/GetUserFriendProfile"
	UserService_UpdateUserInfo_FullMethodName       = "/core.UserService/UpdateUserInfo"
	UserService_UpdateUserStatus_FullMethodName     = "/core.UserService/UpdateUserStatus"
	UserService_UploadUserAvatar_FullMethodName     = "/core.UserService/UploadUserAvatar"
	UserService_UploadUserCover_FullMethodName      = "/core.UserService/UploadUserCover"
	UserService_SearchUser_FullMethodName           = "/core.UserService/SearchUser"
	UserService_AddUserSticker_FullMethodName       = "/core.UserService/AddUserSticker"
	UserService_DeleteUserSticker_FullMethodName    = "/core.UserService/DeleteUserSticker"
	UserService_IsStickerExist_FullMethodName       = "/core.UserService/IsStickerExist"
	UserService_GetUserStickers_FullMethodName      = "/core.UserService/getUserStickers"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	SignUp(ctx context.Context, in *SignUpReq, opts ...grpc.CallOption) (*SignUpResp, error)
	SignIn(ctx context.Context, in *SignInReq, opts ...grpc.CallOption) (*SignInResp, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
	GetUserFriendProfile(ctx context.Context, in *GetUserFriendProfileReq, opts ...grpc.CallOption) (*GetUserFriendProfileResp, error)
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error)
	UpdateUserStatus(ctx context.Context, in *UpdateUserStatusReq, opts ...grpc.CallOption) (*UpdateUserStatusResp, error)
	UploadUserAvatar(ctx context.Context, in *UploadUserAvatarReq, opts ...grpc.CallOption) (*UploadUserAvatarResp, error)
	UploadUserCover(ctx context.Context, in *UploadUserCoverReq, opts ...grpc.CallOption) (*UploadUserCoverResp, error)
	SearchUser(ctx context.Context, in *SearchUserReq, opts ...grpc.CallOption) (*SearchUserResp, error)
	AddUserSticker(ctx context.Context, in *AddStickerReq, opts ...grpc.CallOption) (*AddStickerResp, error)
	DeleteUserSticker(ctx context.Context, in *DeleteStickerReq, opts ...grpc.CallOption) (*DeleteStickerResp, error)
	IsStickerExist(ctx context.Context, in *IsStickerExistReq, opts ...grpc.CallOption) (*IsStickerExistResp, error)
	GetUserStickers(ctx context.Context, in *GetUserStickerReq, opts ...grpc.CallOption) (*GetUserStickerResp, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) SignUp(ctx context.Context, in *SignUpReq, opts ...grpc.CallOption) (*SignUpResp, error) {
	out := new(SignUpResp)
	err := c.cc.Invoke(ctx, UserService_SignUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SignIn(ctx context.Context, in *SignInReq, opts ...grpc.CallOption) (*SignInResp, error) {
	out := new(SignInResp)
	err := c.cc.Invoke(ctx, UserService_SignIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	out := new(GetUserInfoResp)
	err := c.cc.Invoke(ctx, UserService_GetUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserFriendProfile(ctx context.Context, in *GetUserFriendProfileReq, opts ...grpc.CallOption) (*GetUserFriendProfileResp, error) {
	out := new(GetUserFriendProfileResp)
	err := c.cc.Invoke(ctx, UserService_GetUserFriendProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error) {
	out := new(UpdateUserInfoResp)
	err := c.cc.Invoke(ctx, UserService_UpdateUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserStatus(ctx context.Context, in *UpdateUserStatusReq, opts ...grpc.CallOption) (*UpdateUserStatusResp, error) {
	out := new(UpdateUserStatusResp)
	err := c.cc.Invoke(ctx, UserService_UpdateUserStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UploadUserAvatar(ctx context.Context, in *UploadUserAvatarReq, opts ...grpc.CallOption) (*UploadUserAvatarResp, error) {
	out := new(UploadUserAvatarResp)
	err := c.cc.Invoke(ctx, UserService_UploadUserAvatar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UploadUserCover(ctx context.Context, in *UploadUserCoverReq, opts ...grpc.CallOption) (*UploadUserCoverResp, error) {
	out := new(UploadUserCoverResp)
	err := c.cc.Invoke(ctx, UserService_UploadUserCover_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SearchUser(ctx context.Context, in *SearchUserReq, opts ...grpc.CallOption) (*SearchUserResp, error) {
	out := new(SearchUserResp)
	err := c.cc.Invoke(ctx, UserService_SearchUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddUserSticker(ctx context.Context, in *AddStickerReq, opts ...grpc.CallOption) (*AddStickerResp, error) {
	out := new(AddStickerResp)
	err := c.cc.Invoke(ctx, UserService_AddUserSticker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUserSticker(ctx context.Context, in *DeleteStickerReq, opts ...grpc.CallOption) (*DeleteStickerResp, error) {
	out := new(DeleteStickerResp)
	err := c.cc.Invoke(ctx, UserService_DeleteUserSticker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) IsStickerExist(ctx context.Context, in *IsStickerExistReq, opts ...grpc.CallOption) (*IsStickerExistResp, error) {
	out := new(IsStickerExistResp)
	err := c.cc.Invoke(ctx, UserService_IsStickerExist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserStickers(ctx context.Context, in *GetUserStickerReq, opts ...grpc.CallOption) (*GetUserStickerResp, error) {
	out := new(GetUserStickerResp)
	err := c.cc.Invoke(ctx, UserService_GetUserStickers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	SignUp(context.Context, *SignUpReq) (*SignUpResp, error)
	SignIn(context.Context, *SignInReq) (*SignInResp, error)
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error)
	GetUserFriendProfile(context.Context, *GetUserFriendProfileReq) (*GetUserFriendProfileResp, error)
	UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error)
	UpdateUserStatus(context.Context, *UpdateUserStatusReq) (*UpdateUserStatusResp, error)
	UploadUserAvatar(context.Context, *UploadUserAvatarReq) (*UploadUserAvatarResp, error)
	UploadUserCover(context.Context, *UploadUserCoverReq) (*UploadUserCoverResp, error)
	SearchUser(context.Context, *SearchUserReq) (*SearchUserResp, error)
	AddUserSticker(context.Context, *AddStickerReq) (*AddStickerResp, error)
	DeleteUserSticker(context.Context, *DeleteStickerReq) (*DeleteStickerResp, error)
	IsStickerExist(context.Context, *IsStickerExistReq) (*IsStickerExistResp, error)
	GetUserStickers(context.Context, *GetUserStickerReq) (*GetUserStickerResp, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) SignUp(context.Context, *SignUpReq) (*SignUpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedUserServiceServer) SignIn(context.Context, *SignInReq) (*SignInResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedUserServiceServer) GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserServiceServer) GetUserFriendProfile(context.Context, *GetUserFriendProfileReq) (*GetUserFriendProfileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFriendProfile not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserStatus(context.Context, *UpdateUserStatusReq) (*UpdateUserStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserStatus not implemented")
}
func (UnimplementedUserServiceServer) UploadUserAvatar(context.Context, *UploadUserAvatarReq) (*UploadUserAvatarResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadUserAvatar not implemented")
}
func (UnimplementedUserServiceServer) UploadUserCover(context.Context, *UploadUserCoverReq) (*UploadUserCoverResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadUserCover not implemented")
}
func (UnimplementedUserServiceServer) SearchUser(context.Context, *SearchUserReq) (*SearchUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}
func (UnimplementedUserServiceServer) AddUserSticker(context.Context, *AddStickerReq) (*AddStickerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserSticker not implemented")
}
func (UnimplementedUserServiceServer) DeleteUserSticker(context.Context, *DeleteStickerReq) (*DeleteStickerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserSticker not implemented")
}
func (UnimplementedUserServiceServer) IsStickerExist(context.Context, *IsStickerExistReq) (*IsStickerExistResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsStickerExist not implemented")
}
func (UnimplementedUserServiceServer) GetUserStickers(context.Context, *GetUserStickerReq) (*GetUserStickerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStickers not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SignUp(ctx, req.(*SignUpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SignIn(ctx, req.(*SignInReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserFriendProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFriendProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserFriendProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserFriendProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserFriendProfile(ctx, req.(*GetUserFriendProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserStatus(ctx, req.(*UpdateUserStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UploadUserAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadUserAvatarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UploadUserAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UploadUserAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UploadUserAvatar(ctx, req.(*UploadUserAvatarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UploadUserCover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadUserCoverReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UploadUserCover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UploadUserCover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UploadUserCover(ctx, req.(*UploadUserCoverReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SearchUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SearchUser(ctx, req.(*SearchUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddUserSticker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStickerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUserSticker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddUserSticker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUserSticker(ctx, req.(*AddStickerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUserSticker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStickerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUserSticker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUserSticker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUserSticker(ctx, req.(*DeleteStickerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_IsStickerExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsStickerExistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).IsStickerExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_IsStickerExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).IsStickerExist(ctx, req.(*IsStickerExistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStickerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserStickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserStickers(ctx, req.(*GetUserStickerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _UserService_SignUp_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _UserService_SignIn_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _UserService_GetUserInfo_Handler,
		},
		{
			MethodName: "GetUserFriendProfile",
			Handler:    _UserService_GetUserFriendProfile_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _UserService_UpdateUserInfo_Handler,
		},
		{
			MethodName: "UpdateUserStatus",
			Handler:    _UserService_UpdateUserStatus_Handler,
		},
		{
			MethodName: "UploadUserAvatar",
			Handler:    _UserService_UploadUserAvatar_Handler,
		},
		{
			MethodName: "UploadUserCover",
			Handler:    _UserService_UploadUserCover_Handler,
		},
		{
			MethodName: "SearchUser",
			Handler:    _UserService_SearchUser_Handler,
		},
		{
			MethodName: "AddUserSticker",
			Handler:    _UserService_AddUserSticker_Handler,
		},
		{
			MethodName: "DeleteUserSticker",
			Handler:    _UserService_DeleteUserSticker_Handler,
		},
		{
			MethodName: "IsStickerExist",
			Handler:    _UserService_IsStickerExist_Handler,
		},
		{
			MethodName: "getUserStickers",
			Handler:    _UserService_GetUserStickers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/rpc/proto/core.proto",
}

const (
	StoryService_AddStory_FullMethodName               = "/core.StoryService/AddStory"
	StoryService_DeleteStory_FullMethodName            = "/core.StoryService/DeleteStory"
	StoryService_GetUserStoriesByUserId_FullMethodName = "/core.StoryService/GetUserStoriesByUserId"
	StoryService_GetActiveStories_FullMethodName       = "/core.StoryService/GetActiveStories"
	StoryService_UpdateStorySeen_FullMethodName        = "/core.StoryService/UpdateStorySeen"
	StoryService_CreateStoryLike_FullMethodName        = "/core.StoryService/CreateStoryLike"
	StoryService_DeleteStoryLike_FullMethodName        = "/core.StoryService/DeleteStoryLike"
	StoryService_GetStoryInfo_FullMethodName           = "/core.StoryService/GetStoryInfo"
	StoryService_GetStorySeenListInfo_FullMethodName   = "/core.StoryService/GetStorySeenListInfo"
)

// StoryServiceClient is the client API for StoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoryServiceClient interface {
	AddStory(ctx context.Context, opts ...grpc.CallOption) (StoryService_AddStoryClient, error)
	DeleteStory(ctx context.Context, in *DeleteStoryReq, opts ...grpc.CallOption) (*DeleteStoryResp, error)
	GetUserStoriesByUserId(ctx context.Context, in *GetUserStoryReq, opts ...grpc.CallOption) (*GetUserStoryResp, error)
	GetActiveStories(ctx context.Context, in *GetActiveStoryReq, opts ...grpc.CallOption) (*GetActiveStoryResp, error)
	UpdateStorySeen(ctx context.Context, in *UpdateStorySeenReq, opts ...grpc.CallOption) (*UpdateStorySeenResp, error)
	CreateStoryLike(ctx context.Context, in *CreateStoryLikeReq, opts ...grpc.CallOption) (*CreateStoryLikeResp, error)
	DeleteStoryLike(ctx context.Context, in *DeleteStoryReq, opts ...grpc.CallOption) (*DeleteStoryLikeResp, error)
	GetStoryInfo(ctx context.Context, in *GetStoryInfoByIdRep, opts ...grpc.CallOption) (*GetStoryInfoByIdResp, error)
	GetStorySeenListInfo(ctx context.Context, in *GetStorySeenListReq, opts ...grpc.CallOption) (*GetStorySeenListResp, error)
}

type storyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStoryServiceClient(cc grpc.ClientConnInterface) StoryServiceClient {
	return &storyServiceClient{cc}
}

func (c *storyServiceClient) AddStory(ctx context.Context, opts ...grpc.CallOption) (StoryService_AddStoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &StoryService_ServiceDesc.Streams[0], StoryService_AddStory_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &storyServiceAddStoryClient{stream}
	return x, nil
}

type StoryService_AddStoryClient interface {
	Send(*AddStoryReq) error
	CloseAndRecv() (*AddStoryResp, error)
	grpc.ClientStream
}

type storyServiceAddStoryClient struct {
	grpc.ClientStream
}

func (x *storyServiceAddStoryClient) Send(m *AddStoryReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storyServiceAddStoryClient) CloseAndRecv() (*AddStoryResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddStoryResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storyServiceClient) DeleteStory(ctx context.Context, in *DeleteStoryReq, opts ...grpc.CallOption) (*DeleteStoryResp, error) {
	out := new(DeleteStoryResp)
	err := c.cc.Invoke(ctx, StoryService_DeleteStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) GetUserStoriesByUserId(ctx context.Context, in *GetUserStoryReq, opts ...grpc.CallOption) (*GetUserStoryResp, error) {
	out := new(GetUserStoryResp)
	err := c.cc.Invoke(ctx, StoryService_GetUserStoriesByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) GetActiveStories(ctx context.Context, in *GetActiveStoryReq, opts ...grpc.CallOption) (*GetActiveStoryResp, error) {
	out := new(GetActiveStoryResp)
	err := c.cc.Invoke(ctx, StoryService_GetActiveStories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) UpdateStorySeen(ctx context.Context, in *UpdateStorySeenReq, opts ...grpc.CallOption) (*UpdateStorySeenResp, error) {
	out := new(UpdateStorySeenResp)
	err := c.cc.Invoke(ctx, StoryService_UpdateStorySeen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) CreateStoryLike(ctx context.Context, in *CreateStoryLikeReq, opts ...grpc.CallOption) (*CreateStoryLikeResp, error) {
	out := new(CreateStoryLikeResp)
	err := c.cc.Invoke(ctx, StoryService_CreateStoryLike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) DeleteStoryLike(ctx context.Context, in *DeleteStoryReq, opts ...grpc.CallOption) (*DeleteStoryLikeResp, error) {
	out := new(DeleteStoryLikeResp)
	err := c.cc.Invoke(ctx, StoryService_DeleteStoryLike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) GetStoryInfo(ctx context.Context, in *GetStoryInfoByIdRep, opts ...grpc.CallOption) (*GetStoryInfoByIdResp, error) {
	out := new(GetStoryInfoByIdResp)
	err := c.cc.Invoke(ctx, StoryService_GetStoryInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) GetStorySeenListInfo(ctx context.Context, in *GetStorySeenListReq, opts ...grpc.CallOption) (*GetStorySeenListResp, error) {
	out := new(GetStorySeenListResp)
	err := c.cc.Invoke(ctx, StoryService_GetStorySeenListInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoryServiceServer is the server API for StoryService service.
// All implementations must embed UnimplementedStoryServiceServer
// for forward compatibility
type StoryServiceServer interface {
	AddStory(StoryService_AddStoryServer) error
	DeleteStory(context.Context, *DeleteStoryReq) (*DeleteStoryResp, error)
	GetUserStoriesByUserId(context.Context, *GetUserStoryReq) (*GetUserStoryResp, error)
	GetActiveStories(context.Context, *GetActiveStoryReq) (*GetActiveStoryResp, error)
	UpdateStorySeen(context.Context, *UpdateStorySeenReq) (*UpdateStorySeenResp, error)
	CreateStoryLike(context.Context, *CreateStoryLikeReq) (*CreateStoryLikeResp, error)
	DeleteStoryLike(context.Context, *DeleteStoryReq) (*DeleteStoryLikeResp, error)
	GetStoryInfo(context.Context, *GetStoryInfoByIdRep) (*GetStoryInfoByIdResp, error)
	GetStorySeenListInfo(context.Context, *GetStorySeenListReq) (*GetStorySeenListResp, error)
	mustEmbedUnimplementedStoryServiceServer()
}

// UnimplementedStoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStoryServiceServer struct {
}

func (UnimplementedStoryServiceServer) AddStory(StoryService_AddStoryServer) error {
	return status.Errorf(codes.Unimplemented, "method AddStory not implemented")
}
func (UnimplementedStoryServiceServer) DeleteStory(context.Context, *DeleteStoryReq) (*DeleteStoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStory not implemented")
}
func (UnimplementedStoryServiceServer) GetUserStoriesByUserId(context.Context, *GetUserStoryReq) (*GetUserStoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStoriesByUserId not implemented")
}
func (UnimplementedStoryServiceServer) GetActiveStories(context.Context, *GetActiveStoryReq) (*GetActiveStoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveStories not implemented")
}
func (UnimplementedStoryServiceServer) UpdateStorySeen(context.Context, *UpdateStorySeenReq) (*UpdateStorySeenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStorySeen not implemented")
}
func (UnimplementedStoryServiceServer) CreateStoryLike(context.Context, *CreateStoryLikeReq) (*CreateStoryLikeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStoryLike not implemented")
}
func (UnimplementedStoryServiceServer) DeleteStoryLike(context.Context, *DeleteStoryReq) (*DeleteStoryLikeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStoryLike not implemented")
}
func (UnimplementedStoryServiceServer) GetStoryInfo(context.Context, *GetStoryInfoByIdRep) (*GetStoryInfoByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryInfo not implemented")
}
func (UnimplementedStoryServiceServer) GetStorySeenListInfo(context.Context, *GetStorySeenListReq) (*GetStorySeenListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorySeenListInfo not implemented")
}
func (UnimplementedStoryServiceServer) mustEmbedUnimplementedStoryServiceServer() {}

// UnsafeStoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoryServiceServer will
// result in compilation errors.
type UnsafeStoryServiceServer interface {
	mustEmbedUnimplementedStoryServiceServer()
}

func RegisterStoryServiceServer(s grpc.ServiceRegistrar, srv StoryServiceServer) {
	s.RegisterService(&StoryService_ServiceDesc, srv)
}

func _StoryService_AddStory_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StoryServiceServer).AddStory(&storyServiceAddStoryServer{stream})
}

type StoryService_AddStoryServer interface {
	SendAndClose(*AddStoryResp) error
	Recv() (*AddStoryReq, error)
	grpc.ServerStream
}

type storyServiceAddStoryServer struct {
	grpc.ServerStream
}

func (x *storyServiceAddStoryServer) SendAndClose(m *AddStoryResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storyServiceAddStoryServer) Recv() (*AddStoryReq, error) {
	m := new(AddStoryReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StoryService_DeleteStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).DeleteStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoryService_DeleteStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).DeleteStory(ctx, req.(*DeleteStoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_GetUserStoriesByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).GetUserStoriesByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoryService_GetUserStoriesByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).GetUserStoriesByUserId(ctx, req.(*GetUserStoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_GetActiveStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveStoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).GetActiveStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoryService_GetActiveStories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).GetActiveStories(ctx, req.(*GetActiveStoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_UpdateStorySeen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStorySeenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).UpdateStorySeen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoryService_UpdateStorySeen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).UpdateStorySeen(ctx, req.(*UpdateStorySeenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_CreateStoryLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoryLikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).CreateStoryLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoryService_CreateStoryLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).CreateStoryLike(ctx, req.(*CreateStoryLikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_DeleteStoryLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).DeleteStoryLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoryService_DeleteStoryLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).DeleteStoryLike(ctx, req.(*DeleteStoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_GetStoryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryInfoByIdRep)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).GetStoryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoryService_GetStoryInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).GetStoryInfo(ctx, req.(*GetStoryInfoByIdRep))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_GetStorySeenListInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStorySeenListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).GetStorySeenListInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoryService_GetStorySeenListInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).GetStorySeenListInfo(ctx, req.(*GetStorySeenListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// StoryService_ServiceDesc is the grpc.ServiceDesc for StoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.StoryService",
	HandlerType: (*StoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteStory",
			Handler:    _StoryService_DeleteStory_Handler,
		},
		{
			MethodName: "GetUserStoriesByUserId",
			Handler:    _StoryService_GetUserStoriesByUserId_Handler,
		},
		{
			MethodName: "GetActiveStories",
			Handler:    _StoryService_GetActiveStories_Handler,
		},
		{
			MethodName: "UpdateStorySeen",
			Handler:    _StoryService_UpdateStorySeen_Handler,
		},
		{
			MethodName: "CreateStoryLike",
			Handler:    _StoryService_CreateStoryLike_Handler,
		},
		{
			MethodName: "DeleteStoryLike",
			Handler:    _StoryService_DeleteStoryLike_Handler,
		},
		{
			MethodName: "GetStoryInfo",
			Handler:    _StoryService_GetStoryInfo_Handler,
		},
		{
			MethodName: "GetStorySeenListInfo",
			Handler:    _StoryService_GetStorySeenListInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddStory",
			Handler:       _StoryService_AddStory_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "cmd/rpc/proto/core.proto",
}

const (
	GroupService_CreateGroup_FullMethodName        = "/core.GroupService/CreateGroup"
	GroupService_JoinGroup_FullMethodName          = "/core.GroupService/JoinGroup"
	GroupService_LeaveGroup_FullMethodName         = "/core.GroupService/LeaveGroup"
	GroupService_DeleteGroup_FullMethodName        = "/core.GroupService/DeleteGroup"
	GroupService_GetGroupMembers_FullMethodName    = "/core.GroupService/GetGroupMembers"
	GroupService_UploadGroupAvatar_FullMethodName  = "/core.GroupService/UploadGroupAvatar"
	GroupService_UpdateGroupInfo_FullMethodName    = "/core.GroupService/UpdateGroupInfo"
	GroupService_GetUserGroups_FullMethodName      = "/core.GroupService/GetUserGroups"
	GroupService_SearchGroup_FullMethodName        = "/core.GroupService/SearchGroup"
	GroupService_GetGroupInfoByUUID_FullMethodName = "/core.GroupService/GetGroupInfoByUUID"
	GroupService_CountUserGroup_FullMethodName     = "/core.GroupService/CountUserGroup"
)

// GroupServiceClient is the client API for GroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupServiceClient interface {
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error)
	JoinGroup(ctx context.Context, in *JoinGroupReq, opts ...grpc.CallOption) (*JoinGroupResp, error)
	LeaveGroup(ctx context.Context, in *LeaveGroupReq, opts ...grpc.CallOption) (*LeaveGroupResp, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*DeleteGroupResp, error)
	GetGroupMembers(ctx context.Context, in *GetGroupMembersReq, opts ...grpc.CallOption) (*GetGroupMembersResp, error)
	UploadGroupAvatar(ctx context.Context, opts ...grpc.CallOption) (GroupService_UploadGroupAvatarClient, error)
	UpdateGroupInfo(ctx context.Context, in *UpdateGroupInfoReq, opts ...grpc.CallOption) (*UpdateGroupInfoResp, error)
	GetUserGroups(ctx context.Context, in *GetUserGroupReq, opts ...grpc.CallOption) (*GetUserGroupResp, error)
	SearchGroup(ctx context.Context, in *SearchGroupReq, opts ...grpc.CallOption) (*SearchGroupResp, error)
	GetGroupInfoByUUID(ctx context.Context, in *GetGroupInfoByUUIDReq, opts ...grpc.CallOption) (*GetGroupInfoByUUIDResp, error)
	CountUserGroup(ctx context.Context, in *CountUserGroupReq, opts ...grpc.CallOption) (*CountUserGroupResp, error)
}

type groupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupServiceClient(cc grpc.ClientConnInterface) GroupServiceClient {
	return &groupServiceClient{cc}
}

func (c *groupServiceClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error) {
	out := new(CreateGroupResp)
	err := c.cc.Invoke(ctx, GroupService_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) JoinGroup(ctx context.Context, in *JoinGroupReq, opts ...grpc.CallOption) (*JoinGroupResp, error) {
	out := new(JoinGroupResp)
	err := c.cc.Invoke(ctx, GroupService_JoinGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) LeaveGroup(ctx context.Context, in *LeaveGroupReq, opts ...grpc.CallOption) (*LeaveGroupResp, error) {
	out := new(LeaveGroupResp)
	err := c.cc.Invoke(ctx, GroupService_LeaveGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*DeleteGroupResp, error) {
	out := new(DeleteGroupResp)
	err := c.cc.Invoke(ctx, GroupService_DeleteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GetGroupMembers(ctx context.Context, in *GetGroupMembersReq, opts ...grpc.CallOption) (*GetGroupMembersResp, error) {
	out := new(GetGroupMembersResp)
	err := c.cc.Invoke(ctx, GroupService_GetGroupMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) UploadGroupAvatar(ctx context.Context, opts ...grpc.CallOption) (GroupService_UploadGroupAvatarClient, error) {
	stream, err := c.cc.NewStream(ctx, &GroupService_ServiceDesc.Streams[0], GroupService_UploadGroupAvatar_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &groupServiceUploadGroupAvatarClient{stream}
	return x, nil
}

type GroupService_UploadGroupAvatarClient interface {
	Send(*UploadGroupAvatarReq) error
	CloseAndRecv() (*UploadGroupAvatarResp, error)
	grpc.ClientStream
}

type groupServiceUploadGroupAvatarClient struct {
	grpc.ClientStream
}

func (x *groupServiceUploadGroupAvatarClient) Send(m *UploadGroupAvatarReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *groupServiceUploadGroupAvatarClient) CloseAndRecv() (*UploadGroupAvatarResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadGroupAvatarResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *groupServiceClient) UpdateGroupInfo(ctx context.Context, in *UpdateGroupInfoReq, opts ...grpc.CallOption) (*UpdateGroupInfoResp, error) {
	out := new(UpdateGroupInfoResp)
	err := c.cc.Invoke(ctx, GroupService_UpdateGroupInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GetUserGroups(ctx context.Context, in *GetUserGroupReq, opts ...grpc.CallOption) (*GetUserGroupResp, error) {
	out := new(GetUserGroupResp)
	err := c.cc.Invoke(ctx, GroupService_GetUserGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) SearchGroup(ctx context.Context, in *SearchGroupReq, opts ...grpc.CallOption) (*SearchGroupResp, error) {
	out := new(SearchGroupResp)
	err := c.cc.Invoke(ctx, GroupService_SearchGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GetGroupInfoByUUID(ctx context.Context, in *GetGroupInfoByUUIDReq, opts ...grpc.CallOption) (*GetGroupInfoByUUIDResp, error) {
	out := new(GetGroupInfoByUUIDResp)
	err := c.cc.Invoke(ctx, GroupService_GetGroupInfoByUUID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) CountUserGroup(ctx context.Context, in *CountUserGroupReq, opts ...grpc.CallOption) (*CountUserGroupResp, error) {
	out := new(CountUserGroupResp)
	err := c.cc.Invoke(ctx, GroupService_CountUserGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupServiceServer is the server API for GroupService service.
// All implementations must embed UnimplementedGroupServiceServer
// for forward compatibility
type GroupServiceServer interface {
	CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error)
	JoinGroup(context.Context, *JoinGroupReq) (*JoinGroupResp, error)
	LeaveGroup(context.Context, *LeaveGroupReq) (*LeaveGroupResp, error)
	DeleteGroup(context.Context, *DeleteGroupReq) (*DeleteGroupResp, error)
	GetGroupMembers(context.Context, *GetGroupMembersReq) (*GetGroupMembersResp, error)
	UploadGroupAvatar(GroupService_UploadGroupAvatarServer) error
	UpdateGroupInfo(context.Context, *UpdateGroupInfoReq) (*UpdateGroupInfoResp, error)
	GetUserGroups(context.Context, *GetUserGroupReq) (*GetUserGroupResp, error)
	SearchGroup(context.Context, *SearchGroupReq) (*SearchGroupResp, error)
	GetGroupInfoByUUID(context.Context, *GetGroupInfoByUUIDReq) (*GetGroupInfoByUUIDResp, error)
	CountUserGroup(context.Context, *CountUserGroupReq) (*CountUserGroupResp, error)
	mustEmbedUnimplementedGroupServiceServer()
}

// UnimplementedGroupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGroupServiceServer struct {
}

func (UnimplementedGroupServiceServer) CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedGroupServiceServer) JoinGroup(context.Context, *JoinGroupReq) (*JoinGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroup not implemented")
}
func (UnimplementedGroupServiceServer) LeaveGroup(context.Context, *LeaveGroupReq) (*LeaveGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGroup not implemented")
}
func (UnimplementedGroupServiceServer) DeleteGroup(context.Context, *DeleteGroupReq) (*DeleteGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedGroupServiceServer) GetGroupMembers(context.Context, *GetGroupMembersReq) (*GetGroupMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMembers not implemented")
}
func (UnimplementedGroupServiceServer) UploadGroupAvatar(GroupService_UploadGroupAvatarServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadGroupAvatar not implemented")
}
func (UnimplementedGroupServiceServer) UpdateGroupInfo(context.Context, *UpdateGroupInfoReq) (*UpdateGroupInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupInfo not implemented")
}
func (UnimplementedGroupServiceServer) GetUserGroups(context.Context, *GetUserGroupReq) (*GetUserGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGroups not implemented")
}
func (UnimplementedGroupServiceServer) SearchGroup(context.Context, *SearchGroupReq) (*SearchGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGroup not implemented")
}
func (UnimplementedGroupServiceServer) GetGroupInfoByUUID(context.Context, *GetGroupInfoByUUIDReq) (*GetGroupInfoByUUIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupInfoByUUID not implemented")
}
func (UnimplementedGroupServiceServer) CountUserGroup(context.Context, *CountUserGroupReq) (*CountUserGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountUserGroup not implemented")
}
func (UnimplementedGroupServiceServer) mustEmbedUnimplementedGroupServiceServer() {}

// UnsafeGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupServiceServer will
// result in compilation errors.
type UnsafeGroupServiceServer interface {
	mustEmbedUnimplementedGroupServiceServer()
}

func RegisterGroupServiceServer(s grpc.ServiceRegistrar, srv GroupServiceServer) {
	s.RegisterService(&GroupService_ServiceDesc, srv)
}

func _GroupService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_JoinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).JoinGroup(ctx, req.(*JoinGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_LeaveGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).LeaveGroup(ctx, req.(*LeaveGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).DeleteGroup(ctx, req.(*DeleteGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GetGroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GetGroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GetGroupMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GetGroupMembers(ctx, req.(*GetGroupMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_UploadGroupAvatar_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GroupServiceServer).UploadGroupAvatar(&groupServiceUploadGroupAvatarServer{stream})
}

type GroupService_UploadGroupAvatarServer interface {
	SendAndClose(*UploadGroupAvatarResp) error
	Recv() (*UploadGroupAvatarReq, error)
	grpc.ServerStream
}

type groupServiceUploadGroupAvatarServer struct {
	grpc.ServerStream
}

func (x *groupServiceUploadGroupAvatarServer) SendAndClose(m *UploadGroupAvatarResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *groupServiceUploadGroupAvatarServer) Recv() (*UploadGroupAvatarReq, error) {
	m := new(UploadGroupAvatarReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GroupService_UpdateGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).UpdateGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_UpdateGroupInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).UpdateGroupInfo(ctx, req.(*UpdateGroupInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GetUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GetUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GetUserGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GetUserGroups(ctx, req.(*GetUserGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_SearchGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).SearchGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_SearchGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).SearchGroup(ctx, req.(*SearchGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GetGroupInfoByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupInfoByUUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GetGroupInfoByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GetGroupInfoByUUID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GetGroupInfoByUUID(ctx, req.(*GetGroupInfoByUUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_CountUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountUserGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).CountUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_CountUserGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).CountUserGroup(ctx, req.(*CountUserGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupService_ServiceDesc is the grpc.ServiceDesc for GroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.GroupService",
	HandlerType: (*GroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _GroupService_CreateGroup_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _GroupService_JoinGroup_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _GroupService_LeaveGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _GroupService_DeleteGroup_Handler,
		},
		{
			MethodName: "GetGroupMembers",
			Handler:    _GroupService_GetGroupMembers_Handler,
		},
		{
			MethodName: "UpdateGroupInfo",
			Handler:    _GroupService_UpdateGroupInfo_Handler,
		},
		{
			MethodName: "GetUserGroups",
			Handler:    _GroupService_GetUserGroups_Handler,
		},
		{
			MethodName: "SearchGroup",
			Handler:    _GroupService_SearchGroup_Handler,
		},
		{
			MethodName: "GetGroupInfoByUUID",
			Handler:    _GroupService_GetGroupInfoByUUID_Handler,
		},
		{
			MethodName: "CountUserGroup",
			Handler:    _GroupService_CountUserGroup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadGroupAvatar",
			Handler:       _GroupService_UploadGroupAvatar_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "cmd/rpc/proto/core.proto",
}

const (
	FriendService_AddFriend_FullMethodName            = "/core.FriendService/AddFriend"
	FriendService_DeleteFriend_FullMethodName         = "/core.FriendService/DeleteFriend"
	FriendService_GetFriendList_FullMethodName        = "/core.FriendService/GetFriendList"
	FriendService_GetFriendInformation_FullMethodName = "/core.FriendService/GetFriendInformation"
)

// FriendServiceClient is the client API for FriendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendServiceClient interface {
	AddFriend(ctx context.Context, in *AddFriendReq, opts ...grpc.CallOption) (*AddFriendResp, error)
	DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*DeleteFriendResp, error)
	GetFriendList(ctx context.Context, in *GetFriendListReq, opts ...grpc.CallOption) (*GetFriendListResp, error)
	GetFriendInformation(ctx context.Context, in *GetFriendInfoReq, opts ...grpc.CallOption) (*GetFriendInfoResp, error)
}

type friendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendServiceClient(cc grpc.ClientConnInterface) FriendServiceClient {
	return &friendServiceClient{cc}
}

func (c *friendServiceClient) AddFriend(ctx context.Context, in *AddFriendReq, opts ...grpc.CallOption) (*AddFriendResp, error) {
	out := new(AddFriendResp)
	err := c.cc.Invoke(ctx, FriendService_AddFriend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*DeleteFriendResp, error) {
	out := new(DeleteFriendResp)
	err := c.cc.Invoke(ctx, FriendService_DeleteFriend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) GetFriendList(ctx context.Context, in *GetFriendListReq, opts ...grpc.CallOption) (*GetFriendListResp, error) {
	out := new(GetFriendListResp)
	err := c.cc.Invoke(ctx, FriendService_GetFriendList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) GetFriendInformation(ctx context.Context, in *GetFriendInfoReq, opts ...grpc.CallOption) (*GetFriendInfoResp, error) {
	out := new(GetFriendInfoResp)
	err := c.cc.Invoke(ctx, FriendService_GetFriendInformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendServiceServer is the server API for FriendService service.
// All implementations must embed UnimplementedFriendServiceServer
// for forward compatibility
type FriendServiceServer interface {
	AddFriend(context.Context, *AddFriendReq) (*AddFriendResp, error)
	DeleteFriend(context.Context, *DeleteFriendReq) (*DeleteFriendResp, error)
	GetFriendList(context.Context, *GetFriendListReq) (*GetFriendListResp, error)
	GetFriendInformation(context.Context, *GetFriendInfoReq) (*GetFriendInfoResp, error)
	mustEmbedUnimplementedFriendServiceServer()
}

// UnimplementedFriendServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFriendServiceServer struct {
}

func (UnimplementedFriendServiceServer) AddFriend(context.Context, *AddFriendReq) (*AddFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFriend not implemented")
}
func (UnimplementedFriendServiceServer) DeleteFriend(context.Context, *DeleteFriendReq) (*DeleteFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriend not implemented")
}
func (UnimplementedFriendServiceServer) GetFriendList(context.Context, *GetFriendListReq) (*GetFriendListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendList not implemented")
}
func (UnimplementedFriendServiceServer) GetFriendInformation(context.Context, *GetFriendInfoReq) (*GetFriendInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendInformation not implemented")
}
func (UnimplementedFriendServiceServer) mustEmbedUnimplementedFriendServiceServer() {}

// UnsafeFriendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendServiceServer will
// result in compilation errors.
type UnsafeFriendServiceServer interface {
	mustEmbedUnimplementedFriendServiceServer()
}

func RegisterFriendServiceServer(s grpc.ServiceRegistrar, srv FriendServiceServer) {
	s.RegisterService(&FriendService_ServiceDesc, srv)
}

func _FriendService_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_AddFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).AddFriend(ctx, req.(*AddFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_DeleteFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).DeleteFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_DeleteFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).DeleteFriend(ctx, req.(*DeleteFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_GetFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).GetFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_GetFriendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).GetFriendList(ctx, req.(*GetFriendListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_GetFriendInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).GetFriendInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_GetFriendInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).GetFriendInformation(ctx, req.(*GetFriendInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FriendService_ServiceDesc is the grpc.ServiceDesc for FriendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.FriendService",
	HandlerType: (*FriendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFriend",
			Handler:    _FriendService_AddFriend_Handler,
		},
		{
			MethodName: "DeleteFriend",
			Handler:    _FriendService_DeleteFriend_Handler,
		},
		{
			MethodName: "GetFriendList",
			Handler:    _FriendService_GetFriendList_Handler,
		},
		{
			MethodName: "GetFriendInformation",
			Handler:    _FriendService_GetFriendInformation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/rpc/proto/core.proto",
}
