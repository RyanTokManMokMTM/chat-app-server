// Code generated by goctl. DO NOT EDIT.
// Source: core.proto

package storyservice

import (
	"context"

	"github.com/ryantokmanmokmtm/chat-app-server/app/core/cmd/rpc/types/core"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddFriendReq             = core.AddFriendReq
	AddFriendResp            = core.AddFriendResp
	AddStickerReq            = core.AddStickerReq
	AddStickerResp           = core.AddStickerResp
	AddStoryReq              = core.AddStoryReq
	AddStoryResp             = core.AddStoryResp
	CountUserGroupReq        = core.CountUserGroupReq
	CountUserGroupResp       = core.CountUserGroupResp
	CreateGroupReq           = core.CreateGroupReq
	CreateGroupResp          = core.CreateGroupResp
	CreateStickerGroupReq    = core.CreateStickerGroupReq
	CreateStickerGroupResp   = core.CreateStickerGroupResp
	CreateStoryLikeReq       = core.CreateStoryLikeReq
	CreateStoryLikeResp      = core.CreateStoryLikeResp
	DeleteFriendReq          = core.DeleteFriendReq
	DeleteFriendResp         = core.DeleteFriendResp
	DeleteGroupReq           = core.DeleteGroupReq
	DeleteGroupResp          = core.DeleteGroupResp
	DeleteMessageReq         = core.DeleteMessageReq
	DeleteMessageResp        = core.DeleteMessageResp
	DeleteStickerReq         = core.DeleteStickerReq
	DeleteStickerResp        = core.DeleteStickerResp
	DeleteStoryLikeReq       = core.DeleteStoryLikeReq
	DeleteStoryLikeResp      = core.DeleteStoryLikeResp
	DeleteStoryReq           = core.DeleteStoryReq
	DeleteStoryResp          = core.DeleteStoryResp
	FriendInfo               = core.FriendInfo
	FriendStory              = core.FriendStory
	FullGroupInfo            = core.FullGroupInfo
	GetActiveStoryReq        = core.GetActiveStoryReq
	GetActiveStoryResp       = core.GetActiveStoryResp
	GetFriendInfoReq         = core.GetFriendInfoReq
	GetFriendInfoResp        = core.GetFriendInfoResp
	GetFriendListReq         = core.GetFriendListReq
	GetFriendListResp        = core.GetFriendListResp
	GetGroupInfoByUUIDReq    = core.GetGroupInfoByUUIDReq
	GetGroupInfoByUUIDResp   = core.GetGroupInfoByUUIDResp
	GetGroupMembersReq       = core.GetGroupMembersReq
	GetGroupMembersResp      = core.GetGroupMembersResp
	GetMessagesReq           = core.GetMessagesReq
	GetMessagesResp          = core.GetMessagesResp
	GetStickerInfoReq        = core.GetStickerInfoReq
	GetStickerInfoResp       = core.GetStickerInfoResp
	GetStickerListReq        = core.GetStickerListReq
	GetStickerListResp       = core.GetStickerListResp
	GetStickerResourcesReq   = core.GetStickerResourcesReq
	GetStickerResourcesResp  = core.GetStickerResourcesResp
	GetStoryInfoByIdRep      = core.GetStoryInfoByIdRep
	GetStoryInfoByIdResp     = core.GetStoryInfoByIdResp
	GetStorySeenListReq      = core.GetStorySeenListReq
	GetStorySeenListResp     = core.GetStorySeenListResp
	GetUserFriendProfileReq  = core.GetUserFriendProfileReq
	GetUserFriendProfileResp = core.GetUserFriendProfileResp
	GetUserGroupReq          = core.GetUserGroupReq
	GetUserGroupResp         = core.GetUserGroupResp
	GetUserInfoReq           = core.GetUserInfoReq
	GetUserInfoResp          = core.GetUserInfoResp
	GetUserStickerReq        = core.GetUserStickerReq
	GetUserStickerResp       = core.GetUserStickerResp
	GetUserStoryReq          = core.GetUserStoryReq
	GetUserStoryResp         = core.GetUserStoryResp
	GroupInfo                = core.GroupInfo
	GroupMemberInfo          = core.GroupMemberInfo
	IsStickerExistReq        = core.IsStickerExistReq
	IsStickerExistResp       = core.IsStickerExistResp
	JoinGroupReq             = core.JoinGroupReq
	JoinGroupResp            = core.JoinGroupResp
	LeaveGroupReq            = core.LeaveGroupReq
	LeaveGroupResp           = core.LeaveGroupResp
	MessageUser              = core.MessageUser
	PageableInfo             = core.PageableInfo
	SearchGroupReq           = core.SearchGroupReq
	SearchGroupResp          = core.SearchGroupResp
	SearchUserReq            = core.SearchUserReq
	SearchUserResp           = core.SearchUserResp
	SearchUserRespResult     = core.SearchUserRespResult
	SignInReq                = core.SignInReq
	SignInResp               = core.SignInResp
	SignUpReq                = core.SignUpReq
	SignUpResp               = core.SignUpResp
	StickerData              = core.StickerData
	StickerFileMap           = core.StickerFileMap
	StickerInfo              = core.StickerInfo
	StoryInfo                = core.StoryInfo
	StorySeenInfo            = core.StorySeenInfo
	StorySeenUserBasicInfo   = core.StorySeenUserBasicInfo
	UpdateGroupInfoReq       = core.UpdateGroupInfoReq
	UpdateGroupInfoResp      = core.UpdateGroupInfoResp
	UpdateStorySeenReq       = core.UpdateStorySeenReq
	UpdateStorySeenResp      = core.UpdateStorySeenResp
	UpdateUserInfoReq        = core.UpdateUserInfoReq
	UpdateUserInfoResp       = core.UpdateUserInfoResp
	UpdateUserStatusReq      = core.UpdateUserStatusReq
	UpdateUserStatusResp     = core.UpdateUserStatusResp
	UploadGroupAvatarReq     = core.UploadGroupAvatarReq
	UploadGroupAvatarResp    = core.UploadGroupAvatarResp
	UploadUserAvatarReq      = core.UploadUserAvatarReq
	UploadUserAvatarResp     = core.UploadUserAvatarResp
	UploadUserCoverReq       = core.UploadUserCoverReq
	UploadUserCoverResp      = core.UploadUserCoverResp
	UserInfo                 = core.UserInfo

	StoryService interface {
		AddStory(ctx context.Context, in *AddStoryReq, opts ...grpc.CallOption) (*AddStoryResp, error)
		DeleteStory(ctx context.Context, in *DeleteStoryReq, opts ...grpc.CallOption) (*DeleteStoryResp, error)
		GetUserStoriesByUserId(ctx context.Context, in *GetUserStoryReq, opts ...grpc.CallOption) (*GetUserStoryResp, error)
		GetActiveStories(ctx context.Context, in *GetActiveStoryReq, opts ...grpc.CallOption) (*GetActiveStoryResp, error)
		UpdateStorySeen(ctx context.Context, in *UpdateStorySeenReq, opts ...grpc.CallOption) (*UpdateStorySeenResp, error)
		CreateStoryLike(ctx context.Context, in *CreateStoryLikeReq, opts ...grpc.CallOption) (*CreateStoryLikeResp, error)
		DeleteStoryLike(ctx context.Context, in *DeleteStoryLikeReq, opts ...grpc.CallOption) (*DeleteStoryLikeResp, error)
		GetStoryInfo(ctx context.Context, in *GetStoryInfoByIdRep, opts ...grpc.CallOption) (*GetStoryInfoByIdResp, error)
		GetStorySeenListInfo(ctx context.Context, in *GetStorySeenListReq, opts ...grpc.CallOption) (*GetStorySeenListResp, error)
	}

	defaultStoryService struct {
		cli zrpc.Client
	}
)

func NewStoryService(cli zrpc.Client) StoryService {
	return &defaultStoryService{
		cli: cli,
	}
}

func (m *defaultStoryService) AddStory(ctx context.Context, in *AddStoryReq, opts ...grpc.CallOption) (*AddStoryResp, error) {
	client := core.NewStoryServiceClient(m.cli.Conn())
	return client.AddStory(ctx, in, opts...)
}

func (m *defaultStoryService) DeleteStory(ctx context.Context, in *DeleteStoryReq, opts ...grpc.CallOption) (*DeleteStoryResp, error) {
	client := core.NewStoryServiceClient(m.cli.Conn())
	return client.DeleteStory(ctx, in, opts...)
}

func (m *defaultStoryService) GetUserStoriesByUserId(ctx context.Context, in *GetUserStoryReq, opts ...grpc.CallOption) (*GetUserStoryResp, error) {
	client := core.NewStoryServiceClient(m.cli.Conn())
	return client.GetUserStoriesByUserId(ctx, in, opts...)
}

func (m *defaultStoryService) GetActiveStories(ctx context.Context, in *GetActiveStoryReq, opts ...grpc.CallOption) (*GetActiveStoryResp, error) {
	client := core.NewStoryServiceClient(m.cli.Conn())
	return client.GetActiveStories(ctx, in, opts...)
}

func (m *defaultStoryService) UpdateStorySeen(ctx context.Context, in *UpdateStorySeenReq, opts ...grpc.CallOption) (*UpdateStorySeenResp, error) {
	client := core.NewStoryServiceClient(m.cli.Conn())
	return client.UpdateStorySeen(ctx, in, opts...)
}

func (m *defaultStoryService) CreateStoryLike(ctx context.Context, in *CreateStoryLikeReq, opts ...grpc.CallOption) (*CreateStoryLikeResp, error) {
	client := core.NewStoryServiceClient(m.cli.Conn())
	return client.CreateStoryLike(ctx, in, opts...)
}

func (m *defaultStoryService) DeleteStoryLike(ctx context.Context, in *DeleteStoryLikeReq, opts ...grpc.CallOption) (*DeleteStoryLikeResp, error) {
	client := core.NewStoryServiceClient(m.cli.Conn())
	return client.DeleteStoryLike(ctx, in, opts...)
}

func (m *defaultStoryService) GetStoryInfo(ctx context.Context, in *GetStoryInfoByIdRep, opts ...grpc.CallOption) (*GetStoryInfoByIdResp, error) {
	client := core.NewStoryServiceClient(m.cli.Conn())
	return client.GetStoryInfo(ctx, in, opts...)
}

func (m *defaultStoryService) GetStorySeenListInfo(ctx context.Context, in *GetStorySeenListReq, opts ...grpc.CallOption) (*GetStorySeenListResp, error) {
	client := core.NewStoryServiceClient(m.cli.Conn())
	return client.GetStorySeenListInfo(ctx, in, opts...)
}
