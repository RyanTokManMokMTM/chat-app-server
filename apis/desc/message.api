syntax = "v1"

info(
    title: "types title here"
    desc: "types desc here"
    author: "types author here"
    email: "types email here"
    version: "types version here"
)

type (
    GetMessagesReq {
//        ID uint `json:"id"` // -> it may use as the last message it fetched...
        MessageType uint `json:"message_type"`
        SouceId uint `json:"id"` //can be a groupId or friendId
        Page uint `form:"page,default=1"`
        Limit uint `form:"limit,default=20"`
        LatestID uint `form:"latest_id,default=0"`
    }
    GetMessagesResp {
        Code uint `json:"code"`
        Messages []MessageUser `json:"message"`
    }

    DeleteMessageReq {
        MesssageID uint `json:"msg_id"`
    }
    DeleteMessageResp {
        Code uint `json:"code"`
    }
)

type (
    MessageUser {
        MessageID uint `json:"id"`
        FromID uint `json:"from_id"`
        ToID uint `json:"to_id"`
        Content string `json:"content"`
        ContentType uint `json:"content_type"`
        MessageType uint `json:"message_type"`
        Url string `json:"url"`
        FileName  string `json:"file_name"`
        FileSize    uint `json:"file_size"`
        StoryTime   uint `json:"story_available_time"`
        CreatedAt uint `json:"create_at"`
    }
)

@server (
    group : message
    prefix : /api/v1
    jwt: Auth
)
service ChatApp {
    @doc(
        summary : "get room messages by roomID"
    )
    @handler GetMessages
    get /message(GetMessagesReq) returns (GetMessagesResp);

    @doc(
        summary : "Delete one message"
    )
    @handler DeleteMessage
    delete /message(DeleteMessageReq) returns (DeleteMessageResp);
}