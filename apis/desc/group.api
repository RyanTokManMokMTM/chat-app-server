syntax = "v1"

info(
    title: "type title here"
    desc: "type desc here"
    author: "type author here"
    email: "type email here"
    version: "type version here"
)

type (
    CreateGroupReq {
        GroupName string `json:"group_name"`
        GroupMembers []uint `json:"members"`
        GroupAvatar string `json:"avatar"`
    }
    CreateGroupResp {
        Code uint `json:"code"`
        GroupUUID string `json:"group_uuid"`
        GroupAvatar string `json:"grou_avatar"`
    }

    JoinGroupReq {
        GroupID uint `path:"group_id"`
    }
    JoinGroupResp {
        Code uint `json:"code"`
    }

    LeaveGroupReq {
        GroupID uint `path:"group_id"`
    }
    LeaveGroupResp {
        Code uint `json:"code"`
    }

    DeleteGroupReq {
        GroupID uint `json:"group_id"`
    }
    DeleteGroupResp {
        Code uint `json:"code"`
    }


    GetGroupMembersReq {
        GroupID uint `path:"group_id"`
    }
    GetGroupMembersResp {
        Code uint `json:"code"`
        MemberList []GroupMemberInfo `json:"member_list"`
    }

    UpdateGroupInfoReq {
        GroupID uint `json:"group_id"`
        GroupName string `json:"group_name"`
    }
    UpdateGroupInfoResp {
        Code uint `json:"code"`
    }

    UploadGroupAvatarReq {
        GroupID uint `path:"grou_id"`
    }
    UploadGroupAvatarResp {
        Code uint `json:"code"`
    }

    GetUserGroupReq{}
    GetUserGroupResp {
        Code uint `json:"code"`
        Groups []GroupInfo `json:"groups"`
    }

    SearchGroupReq {
        qurey string `form:"query"`
    }
    SearchGroupResp {
        Code uint `json:"code"`
        Results []FullGroupInfo `json:"results"`
    }

    GetGroupInfoByUUIDReq {
        UUID string `path:"uuid"`
    }
    GetGroupInfoByUUIDResp {
        Code uint `json:"code"`
        Result FullGroupInfo `json:"result"`
    }
)

type (
    GroupMemberInfo {
        CommonUserInfo
        IsGroupLead bool `json:"is_group_lead"`
    }

    GroupInfo {
        ID uint `json:"id"`
        Uuid string `json:"uuid"`
        Name string `json:"name"`
        Avatar string `json:"avatar"`
        CreatedAt uint `json:"created_at"`
    }

    FullGroupInfo {
        GroupInfo
        Members uint `json:"members"`
        IsJoined bool `json:"is_joined"`
    }


)

@server (
    group: group
    prefix : /api/v1
    jwt: Auth
)
service  ChatApp {
    @handler CreateGroup
    post /group(CreateGroupReq) returns (CreateGroupResp);

    @handler JoinGroup
    post /group/join/:group_id(JoinGroupReq) returns (JoinGroupResp);

    @handler LeaveGroup
    delete /group/leave/:group_id(LeaveGroupReq) returns (LeaveGroupResp);

    @handler DeleteGroup
    delete /group(DeleteGroupReq) returns (DeleteGroupResp);

    @handler GetGroupMembers
    get   /group/members/:group_id(GetGroupMembersReq) returns (GetGroupMembersResp)

    @handler UploadGroupAvatar
    post /group/avatar/:grou_id(UploadGroupAvatarReq) returns ( UploadGroupAvatarResp)

    @handler UpdateGroupInfo
    patch /group/update(UpdateGroupInfoReq) returns ( UpdateGroupInfoResp)

    @handler GetUserGroups
    get /group(GetUserGroupReq) returns (GetUserGroupResp)

    @handler SearchGroup
    get /group/search(SearchGroupReq) returns (SearchGroupResp)

    @handler GetGroupInfoByUUID
    get /group/info/uuid/:uuid(GetGroupInfoByUUIDReq) returns (GetGroupInfoByUUIDResp)
}