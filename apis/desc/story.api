syntax = "v1"

info(
    title: "type title here"
    desc: "type desc here"
    author: "type author here"
    email: "type email here"
    version: "type version here"
)

type (
    AddStoryReq {}
    AddStoryResp {
        Code uint `json:"code"`
        StoryID uint `json:"story_id"`
    }

    GetUserStoryReq {
        userID uint `path:"user_id"`
        StoryCreatedTime uint `form:"story_created_time,default=0"`
    }
    GetUserStoryResp {
        Code uint `json:"code"`
        StoryIDs []uint `json:"story_ids"`
    }

    GetActiveStoryReq {
        Page uint `form:"page,default=1"`
        Limit uint `form:"limit,default=20"`
        LatestID uint `form:"lastestId,default=0"`
        StoryCreatedTime uint `form:"story_created_time,default=0"`
    }
    GetActiveStoryResp {
        Code uint `json:"code"`
        PageableInfo
        CurrentStoryTime uint `json:"current_story_time"`
        FriendStroies []FriendStroy `json:"active_stories"`
    }

    DeleteStoryReq {
        StoryID uint `json:"story_id"`
    }
    DeleteStoryResp {
        Code uint `json:"code"`
    }

    GetStoryInfoByIdRep {
        StoryID uint `path:"story_id"`
    }
    GetStoryInfoByIdResp {
        Code uint `json:"code"`
        StoryID uint `json:"story_id"`
        StoryMediaURL string `json:"media_url"`
        CreateAt uint `json:"create_at"`
    }

)

type (
    FriendStroy {
        UserID uint `json:"id"`
        Uuid string `json:"uuid"`
        UserName string `json:"name"`
        UserAvatar string `json:"avatar"`
        IsSeen bool `json:"is_seen"`
    }
)

@server (
    group : story
    prefix : /api/v1
    jwt : Auth
)
service ChatApp{
    @doc(
        summary : "Create a new instance story"
    )
    @handler AddStory
    post /story(AddStoryReq) returns (AddStoryResp)

    @doc(
        summary : "Delete an existing story"
    )
    @handler DeleteStory
    delete /story(DeleteStoryReq) returns(DeleteStoryResp)

    @doc(
        summary : "Get owner stories"
    )
    @handler GetUserStoriesByUserId
    get /stories/:user_id(GetUserStoryReq) returns (GetUserStoryResp)

    @doc(
        summary : "Get friends active story"
    )
    @handler GetActiveStories
    get /stories/active(GetActiveStoryReq) returns (GetActiveStoryResp)


}


@server (
    group : story
    prefix : /api/v1
)
service ChatApp {
    @doc(
        summary : "Get an instance story by storyID"
    )
    @handler GetStoryInfo
    get /story/:story_id (GetStoryInfoByIdRep) returns (GetStoryInfoByIdResp)
}